import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:${appName}${relative}/index.dart';

class ${upperName}Screen extends StatefulWidget {
  const ${upperName}Screen({
    Key key,
    @required ${upperName}Bloc ${privateName}Bloc,
  })  : _${privateName}Bloc = ${privateName}Bloc,
        super(key: key);

  final ${upperName}Bloc _${privateName}Bloc;

  @override
  ${upperName}ScreenState createState() => ${upperName}ScreenState(_${privateName}Bloc);
}

class ${upperName}ScreenState extends State<${upperName}Screen> {
  final ${upperName}Bloc _${privateName}Bloc;
  ${upperName}ScreenState(this._${privateName}Bloc);

  @override
  void initState() {
    super.initState();
    this._${privateName}Bloc.add(Initial${upperName}());
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<${upperName}Bloc, ${upperName}State>(
      bloc: widget._${privateName}Bloc,
      listener: _blocListenerHandler,
      child: BlocBuilder<${upperName}Bloc, ${upperName}State>(
        bloc: widget._${privateName}Bloc,
        builder: _blocBuilderHandler,
      ),
    );
  }

  void _blocListenerHandler(
    BuildContext context,
    ${upperName}State currentState,
  ) {
    if (currentState.isFailure) {}
    else if (currentState.isLoading) {}
    else if (currentState.isSuccess) {}
  }

  Widget _blocBuilderHandler(
    BuildContext context,
    ${upperName}State currentState,
  ) {
    return CircularProgressIndicator();
  }
}
